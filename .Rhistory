# Load required libraries
library(tidyverse)
library(class)
# Load stroke_data dataset
stroke_data <- read.csv("path/to/stroke_data.csv", stringsAsFactors = TRUE)
# Load required libraries
library(tidyverse)
library(class)
# Load stroke_data dataset
stroke_data <- read.csv("C:/Users/Asus/Downloads/stroke_data.csv", stringsAsFactors = TRUE)
# View the structure of the dataset
str(stroke_data)
# Split the data into training and testing sets
set.seed(123) # For reproducibility
train_index <- sample(1:nrow(stroke_data), 0.7 * nrow(stroke_data))
train_data <- stroke_data[train_index, ]
test_data <- stroke_data[-train_index, ]
# Define features (e.g., age, hypertension, heart_disease, avg_glucose_level, bmi) and target (stroke)
features <- c("age", "hypertension", "heart_disease", "avg_glucose_level", "bmi")
target <- "stroke"
# Train the KNN model
k <- 5 # Number of neighbors
knn_model <- knn(train = train_data[features], test = test_data[features], cl = train_data[[target]], k = k)
# Load required libraries
library(tidyverse)
library(cluster)
library(fpc)
library(class)
# Set seed for reproducibility
set.seed(123)
customer <- read.csv("C:/Users/Asus/Downloads/Mall_Customers (2).csv", stringsAsFactors = TRUE)
# Select relevant columns (Annual Income and Spending Score)
customer <- customer[, 4:5]
# Perform k-means clustering with k=3
kmeans_model <- kmeans(customer, centers = 3)
# Perform hierarchical clustering
hierarchical_model <- hclust(dist(customer))
# Cut the dendrogram to obtain clusters
hierarchical_clusters <- cutree(hierarchical_model, k = 3)
# Perform DBSCAN clustering
dbscan_model <- dbscan(customer, eps = 3, MinPts = 5)
# Combine the clustered results with the original data
customer_clustered <- cbind(customer, Kmeans_Cluster = kmeans_model$cluster)
# Split the data into training and testing sets
set.seed(123) # For reproducibility
train_index <- sample(1:nrow(customer_clustered), 0.7 * nrow(customer_clustered))
train_data <- customer_clustered[train_index, ]
test_data <- customer_clustered[-train_index, ]
# Define features (Annual Income and Spending Score) and target (Kmeans_Cluster)
features <- names(train_data)[1:2]
target <- "Kmeans_Cluster"
# Train the KNN model
k <- 5 # Number of neighbors
knn_model <- knn(train = train_data[features], test = test_data[features], cl = train_data[[target]], k = k)
# Evaluate the model
accuracy <- mean(knn_model == test_data[[target]])
cat("Accuracy of KNN model:", accuracy, "\n")
# Load required libraries
library(tidyverse)
library(cluster)
library(fpc)
library(class)
# Set seed for reproducibility
set.seed(123)
customer <- read.csv("C:/Users/Asus/Downloads/stroke_data.csv", stringsAsFactors = TRUE)
# Select relevant columns (Annual Income and Spending Score)
customer <- customer[, 4:5]
# Perform k-means clustering with k=3
kmeans_model <- kmeans(customer, centers = 3)
# Load required libraries
library(tidyverse)
library(class)
# Load stroke_data dataset
stroke_data <- read.csv("C:/Users/Asus/Downloadsstroke_data.csv", stringsAsFactors = TRUE)
# Load required libraries
library(tidyverse)
library(class)
# Load stroke_data dataset
stroke_data <- read.csv("C:/Users/Asus/Downloads/stroke_data.csv", stringsAsFactors = TRUE)
# View the structure of the dataset
str(stroke_data)
# Split the data into training and testing sets
set.seed(123) # For reproducibility
train_index <- sample(1:nrow(stroke_data), 0.7 * nrow(stroke_data))
train_data <- stroke_data[train_index, ]
test_data <- stroke_data[-train_index, ]
# Define features (e.g., age, hypertension, heart_disease, avg_glucose_level, bmi) and target (stroke)
features <- c("age", "hypertension", "heart_disease", "avg_glucose_level", "bmi")
target <- "stroke"
# Train the KNN model
k <- 5 # Number of neighbors
knn_model <- knn(train = train_data[features], test = test_data[features], cl = train_data[[target]], k = k)
# Load required library
library(class)
# Load the dataset
stroke_data <- read.csv("C:/Users/Asus/Desktop/stroke_data.csv")
view(data)
# Check the structure of the dataset
str(stroke_data)
# Convert "bmi" column to numeric (assuming "N/A" represents missing values)
stroke_data$bmi <- as.numeric(ifelse(stroke_data$bmi == "N/A", NA, stroke_data$bmi))
# Convert factors to characters
stroke_data$gender <- as.character(stroke_data$gender)
stroke_data$ever_married <- as.character(stroke_data$ever_married)
stroke_data$Residence_type <- as.character(stroke_data$Residence_type)
stroke_data$smoking_status <- as.character(stroke_data$smoking_status)
# Handle missing values
stroke_data <- na.omit(stroke_data)
# Split the dataset into training and testing sets
set.seed(123)  # for reproducibility
train_indices <- sample(1:nrow(stroke_data), 0.7 * nrow(stroke_data))
train_data <- stroke_data[train_indices, ]
test_data <- stroke_data[-train_indices, ]
# Perform KNN classification
predicted <- knn(train = train_data[, -ncol(train_data)],
test = test_data[, -ncol(test_data)],
cl = train_data$stroke,
k = 5)
# Convert "bmi" column to numeric (assuming "N/A" represents missing values)
stroke_data$bmi <- as.numeric(ifelse(stroke_data$bmi == "N/A", NA, stroke_data$bmi))
# Convert factors to characters
stroke_data$gender <- as.character(stroke_data$gender)
stroke_data$ever_married <- as.character(stroke_data$ever_married)
stroke_data$Residence_type <- as.character(stroke_data$Residence_type)
stroke_data$smoking_status <- as.character(stroke_data$smoking_status)
# Handle missing values
stroke_data <- na.omit(stroke_data)
# Split the dataset into training and testing sets
set.seed(123)  # for reproducibility
train_indices <- sample(1:nrow(stroke_data), 0.7 * nrow(stroke_data))
train_data <- stroke_data[train_indices, ]
test_data <- stroke_data[-train_indices, ]
# Perform KNN classification
predicted <- knn(train = train_data[, -which(names(train_data) == "stroke")],
test = test_data[, -which(names(test_data) == "stroke")],
cl = train_data$stroke,
k = 5)
# Perform KNN classification
predicted <- knn(train = train_data[, -which(names(train_data) == "stroke")],
test = test_data[, -which(names(test_data) == "stroke")],
cl = train_data$stroke,
k = 5)
# Convert 'stroke' to factor
train_data$stroke <- as.factor(train_data$stroke)
# Perform KNN classification
predicted <- knn(train = train_data[, -which(names(train_data) == "stroke")],
test = test_data[, -which(names(test_data) == "stroke")],
cl = train_data$stroke,
k = 5)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("naniar")
#reading the csv file
data = read.csv("C:/Users/Asus/Desktop/stroke_data.csv")
str(data)
# Converting character values to numeric values
clean_data <- data %>% mutate(gender = if_else(gender == "Female", 0, if_else(gender == "Male", 1, 2)), ever_married = if_else(ever_married == "Yes", 1, 0), Residence_type = if_else(Residence_type == "Rural", 0, 1), smoking_status = if_else(smoking_status == "never smoked", 0, if_else(smoking_status == "formerly smoked", 1, if_else(smoking_status == "smokes", 2, 3))))
library(tidyverse)
#reading the csv file
data = read.csv("C:/Users/Asus/Desktop/stroke_data.csv")
str(data)
# Converting character values to numeric values
clean_data <- data %>% mutate(gender = if_else(gender == "Female", 0, if_else(gender == "Male", 1, 2)), ever_married = if_else(ever_married == "Yes", 1, 0), Residence_type = if_else(Residence_type == "Rural", 0, 1), smoking_status = if_else(smoking_status == "never smoked", 0, if_else(smoking_status == "formerly smoked", 1, if_else(smoking_status == "smokes", 2, 3))))
summary(clean_data)
glimpse(clean_data)
# Handling missing values
miss_scan_count(data = data, search = list("N/A", "Unknown"))
library(tidyverse)
library(naniar)
#reading the csv file
data = read.csv("C:/Users/Asus/Desktop/stroke_data.csv")
str(data)
# Converting character values to numeric values
clean_data <- data %>% mutate(gender = if_else(gender == "Female", 0, if_else(gender == "Male", 1, 2)), ever_married = if_else(ever_married == "Yes", 1, 0), Residence_type = if_else(Residence_type == "Rural", 0, 1), smoking_status = if_else(smoking_status == "never smoked", 0, if_else(smoking_status == "formerly smoked", 1, if_else(smoking_status == "smokes", 2, 3))))
summary(clean_data)
glimpse(clean_data)
# Handling missing values
miss_scan_count(data = data, search = list("N/A", "Unknown"))
# There are 201 "N/A" values in the bmi column that likely caused this column
# to be parsed as character, although it should be numerical.
#  replacing those values with actual NAs.
# lot of "Unknown" values in smoking_status
#  We see that we have 1544 unknown values for smoking status and
# replace those values with
# NAs.
clean_data <- replace_with_na(data = clean_data, replace = list(bmi = c("N/A"), smoking_status = c(3))) %>% mutate(bmi = as.numeric(bmi))
set.seed(99)
index <- createDataPartition(clean_data$stroke, p = 0.8, list = FALSE)
library(caret)
set.seed(99)
index <- createDataPartition(clean_data$stroke, p = 0.8, list = FALSE)
train_data <- clean_data[index, ]
test_data <- clean_data[-index, ]
# Normalize numerical features
scaler <- preProcess(train_data[c("age", "avg_glucose_level", "bmi")], method = c("center", "scale"))
train_data[c("age", "avg_glucose_level", "bmi")] <- predict(scaler, train_data[c("age", "avg_glucose_level", "bmi")])
test_data[c("age", "avg_glucose_level", "bmi")] <- predict(scaler, test_data[c("age", "avg_glucose_level", "bmi")])
# Handle missing values (if any)
train_data[is.na(train_data)] <- 0
test_data[is.na(test_data)] <- 0
library(class)
# Train the KNN model
knn_model <- knn(train = train_data[, -10], test = test_data[, -10], cl = train_data$stroke, k = 100)
# Convert predictions to binary
knn_predictions_binary <- ifelse(knn_model == "Yes", 1, 0)
library(class)
# Train the KNN model
knn_model <- knn(train = train_data[, -10], test = test_data[, -10], cl = train_data$stroke, k = 100)
knn_predictions_binary <- ifelse(knn_model == "Yes", 1, 0)
